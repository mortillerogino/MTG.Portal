// <auto-generated />
using MTG.Database.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MTG.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250621145150_InitialSeed")]
    partial class InitialSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MTG.Domain.Models.Binder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Binders");
                });

            modelBuilder.Entity("MTG.Domain.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BinderId")
                        .HasColumnType("int");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Page")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BinderId");

                    b.ToTable("Cards");

                    b.HasDiscriminator<string>("CardType").HasValue("Base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MTG.Domain.Models.MtgColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MtgColors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "White mana",
                            Name = "White"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Green mana",
                            Name = "Green"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Red mana",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Blue mana",
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Black mana",
                            Name = "Black"
                        });
                });

            modelBuilder.Entity("MTG.Domain.Models.MtgType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MtgTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Land card",
                            Name = "Land"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Creature card",
                            Name = "Creature"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Enchantment card",
                            Name = "Enchantment"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Sorcery card",
                            Name = "Sorcery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Instant card",
                            Name = "Instant"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Artifact card",
                            Name = "Artifact"
                        });
                });

            modelBuilder.Entity("MtgCardColor", b =>
                {
                    b.Property<int>("MtgCardId")
                        .HasColumnType("int");

                    b.Property<int>("MtgColorId")
                        .HasColumnType("int");

                    b.HasKey("MtgCardId", "MtgColorId");

                    b.HasIndex("MtgColorId");

                    b.ToTable("MtgCardColors", (string)null);
                });

            modelBuilder.Entity("MtgCardType", b =>
                {
                    b.Property<int>("MtgCardId")
                        .HasColumnType("int");

                    b.Property<int>("MtgTypeId")
                        .HasColumnType("int");

                    b.HasKey("MtgCardId", "MtgTypeId");

                    b.HasIndex("MtgTypeId");

                    b.ToTable("MtgCardTypes", (string)null);
                });

            modelBuilder.Entity("MTG.Domain.Models.MtgCard", b =>
                {
                    b.HasBaseType("MTG.Domain.Models.Card");

                    b.HasDiscriminator().HasValue("MTG");
                });

            modelBuilder.Entity("MTG.Domain.Models.Card", b =>
                {
                    b.HasOne("MTG.Domain.Models.Binder", "Binder")
                        .WithMany("Cards")
                        .HasForeignKey("BinderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Binder");
                });

            modelBuilder.Entity("MtgCardColor", b =>
                {
                    b.HasOne("MTG.Domain.Models.MtgCard", null)
                        .WithMany()
                        .HasForeignKey("MtgCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTG.Domain.Models.MtgColor", null)
                        .WithMany()
                        .HasForeignKey("MtgColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MtgCardType", b =>
                {
                    b.HasOne("MTG.Domain.Models.MtgCard", null)
                        .WithMany()
                        .HasForeignKey("MtgCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTG.Domain.Models.MtgType", null)
                        .WithMany()
                        .HasForeignKey("MtgTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTG.Domain.Models.Binder", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
